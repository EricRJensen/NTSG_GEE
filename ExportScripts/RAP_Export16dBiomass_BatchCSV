// Author: Matt Jones and Eric Jensen, Working Lands for Wildlife, University of Montana
// Contact: eric.jensen@mso.umt.edu 
// Date: March 30, 2021
// Purpose of script: This script exports RAP 16-day Herbaceous Biomass tables (CSV file format) for multiple regions of interest from Google Earth Engine to your personal Google Drive
// Supporting article: https://support.rangelands.app/article/66-batch-export-16-day-herbaceous-biomass-csvs

 
// ------------------------------------------------------------
// -------------- Variables for User to change ----------------
// ------------------------------------------------------------

// ---------------- Notes to user ----------------
// Follow the instructions in the "Supporting article" linked above for uploading and importing your shapefile. 
// Once you have imported your shapefile

// ---------- Define the years that you want to export --------------
// ---------- End year is inclusive in this case  ------------------
var yearStart = 2010
var yearEnd = 2019


// ----------------------------------------------------------------------
// -------------- Do not edit anything below this header ----------------
// ----------------------------------------------------------------------

// -------------- Import and convert annual net primary productivity to aboveground herbaceous biomass production --------------
var npp = ee.ImageCollection("projects/rangeland-analysis-platform/npp-partitioned-16day-v2")
  .select(['afgNPP', 'pfgNPP']);
var mat = ee.ImageCollection("projects/rangeland-analysis-platform/gridmet-MAT");

// Biomass conversion function
// Input: two band image (afgNPP, pfgNPP) from projects/rangeland-analysis-platform/npp-partitioned-v2
// Output: three band image, aboveground biomass (afgAGB, pfgAGB, herbaceousAGB)
var biomassFunction = function(image) {
    
    var year = ee.Date(image.get('system:time_start')).format('YYYY');
    var matYear = mat.filterDate(year).first();
    var fANPP = (matYear.multiply(0.0129)).add(0.171).rename('fANPP'); // fraction of NPP to allocate aboveground
    
    var agb = image.multiply(0.0001) // NPP scalar 
                .multiply(2.20462) // KgC to lbsC
                .multiply(4046.86) // m2 to acres
                .multiply(fANPP)  // fraction of NPP aboveground
                .multiply(2.1276) // C to biomass
                .rename(['afgAGB', 'pfgAGB'])
                .copyProperties(image, ['system:time_start'])
                .set('year', year);

    var herbaceous = ee.Image(agb).reduce(ee.Reducer.sum()).rename(['herbaceousAGB']);
    
    agb = ee.Image(agb).addBands(herbaceous);

    return agb;
};

var biomass = npp.map(biomassFunction);


// -------------- Select PFTs of interest and filter by date --------------
var biomassSubset = biomass.select(['afgAGB', 'pfgAGB', 'herbaceousAGB'])
  .filterDate(String(yearStart)+'-01-01',String(yearEnd)+'-01-01')

print(biomassSubset)

// -------------- Visualize previews of the images and geometries --------------
// Parameters to visualize the data in the map panel; not essential but helpful
// Define a color palette
var paletteVis = ['#EEE714', '#ABFFF3', '#51FF31', '#1DB328']
// Define band to visualize and the min/max (stretch) for color palette
var visParams = {bands:['herbaceousAGB'], min: 0, max: 5, palette: paletteVis}

// Add layers to map
Map.addLayer(biomassSubset, visParams, 'Herbaceous biomass')
Map.addLayer(table, {}, 'Imported shapefile')

// Function that uses reduceRegions 
// This function will be mapped over each image in the collection
var rRegions = function(img){
  var result = img.reduceRegions({
      collection: table,  // the shapefile that will be used to calculate statistics 
      reducer: ee.Reducer.mean(),  // calculate a mean for each polygon, use other reducers for other stats
      crs: 'EPSG:4326', 
      scale: 30,
      tileScale: 16
    });
  return result
}

// Map the function across the image collection
var reductionResult = biomassSubset.map(rRegions)

print(reductionResult)

// Export the sampled means to a csv
Export.table.toDrive({
  collection: reductionResult.flatten(),
  description: 'RAP_Biomass16d',
  folder: 'RAP_exports',
  fileFormat: 'CSV'
});